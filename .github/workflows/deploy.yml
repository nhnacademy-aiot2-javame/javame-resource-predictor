# .github/workflows/deploy.yml

name: Deploy Python Predictor

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: resource-predictor
  SERVICE_NAME: resource-predictor

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build & Push Docker Image
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:$IMAGE_TAG .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:$IMAGE_TAG
        echo "PREDICTOR_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        port: 8822
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          cd ~/docker/javame
          
          # 환경변수 업데이트
          if grep -q '^PREDICTOR_IMAGE_TAG=' .env; then
            sed -i "s|^PREDICTOR_IMAGE_TAG=.*|PREDICTOR_IMAGE_TAG=${{ github.sha }}|" .env
          else
            echo "PREDICTOR_IMAGE_TAG=${{ github.sha }}" >> .env
          fi
          
          # resource-predictor 서비스만 안전하게 재시작
          echo "현재 실행 중인 서비스 확인..."
          docker-compose ps
          
          # resource-predictor만 중지 (다른 서비스는 영향 없음)
          echo "resource-predictor 서비스 중지..."
          docker-compose stop resource-predictor || echo "서비스가 이미 중지됨"
          
          # 컨테이너 삭제 (--volumes 옵션 제외하여 볼륨 유지)
          echo "기존 resource-predictor 컨테이너 제거..."
          docker-compose rm -f resource-predictor || echo "컨테이너가 이미 제거됨"
          
          # 새 이미지 pull (다른 서비스 영향 없음)
          echo "새 이미지 다운로드..."
          docker-compose pull resource-predictor
          
          # resource-predictor만 재시작 (--no-deps로 의존성 서비스 제외)
          echo "resource-predictor 서비스 시작..."
          docker-compose up -d --no-deps --no-recreate resource-predictor
          
          # 서비스 상태 확인
          echo "배포 완료. 서비스 상태 확인..."
          sleep 5
          docker-compose ps | grep resource-predictor
          
          # 최근 로그 확인 (에러 체크용)
          echo "최근 로그 확인..."
          docker-compose logs --tail=20 resource-predictor